#!/bin/bash

__ES_STATUS_URL_DEFAULT='http://localhost:9200/status'

function ____show_help() {
    echo "$0  [-v|-V] [-C] <command>  [<args>]"
    echo
    echo "Query StormCrawler's Elasticsearch status index"
    echo "  with help of curl, jq and bash"
    echo
    echo "Global options"
    echo " -h   show detailed help"
    echo " -v   verbose, print commands before execution"
    echo " -V   very verbose"
    echo " -D   dry run, do not execute request to ES (use in combination with -v)"
    echo " -C   colorize JSON output"
    echo
    echo "Commands"
    echo
    echo " url <URL>"
    echo "      look up by URL"
    echo " delete_url <URL>"
    echo "      delete document/record by URL"
    echo " delete_url_with_routing <URL> <ROUTING>"
    echo "      delete document/record by URL with forced routing"
    echo " reset_url <URL>"
    echo "      reset by URL (resets status to DISCOVERED and removes fetch-relevant metadata)"
    echo " fetch_now_url <URL>"
    echo "      set time of next fetch to now for URL (does not reset metadata)"
    echo " fetch_at_url <URL> <DATE>"
    echo "      set time of next fetch to DATE for URL (does not reset metadata)"
    echo "      (valid DATE formats include even \`tomorrow', \`third day', see \`man date')"
    echo " set_metadata_url <URL> <METAFIELD> <METAVALUE>"
    echo "      set metadata for URL"
    echo " inject_url <URL> <ROUTING> [<METAFIELD> <METAVALUE>]..."
    echo "      inject URL with metadata METAFIELD=METAVALUE"
    echo
    echo " id <ID> <ROUTING>"
    echo "      look up by ID"
    echo " delete_id <ID> <ROUTING>"
    echo "      delete document/record by ID"
    echo
    echo " list <SIZE>"
    echo "      list SIZE documents"
    echo " query [search|count] <QUERY> [<PAGE> [<SIZE>]]"
    echo "      query status index"
    echo " match [search|count] <EXPR>"
    echo "      match expression in status index"
    echo " match_field [search|count] <FIELD> <VALUE>"
    echo "      match documents by field and value"
    echo " match_by_metadata [search|count] <FIELD> <VALUE> <META>"
    echo "      match documents by field value and metadata"
    echo
    echo " aggregate_status"
    echo "      aggregate fetch status"
    echo " aggregate_hostname <META> [<SIZE>]"
    echo "      aggregate host names (or domain names) filtered by metadata"
    echo " aggregate_hostname_by_status <STATUS>"
    echo "      aggregate host names (or domain names) filtered by status"
    echo " aggregate <FIELD> [<SIZE>]"
    echo "      aggregate values on field"
    echo " aggregate_by_metadata <FIELD> <META> [<SIZE>]"
    echo "      aggregate field values filtered by metadata"
    echo " aggregate_by <FIELD> <QUERY> <SIZE>"
    echo "      aggregate field values filtered by query"
    echo
    echo " next_fetch [search|count] [<PAGE> [<SIZE>]]"
    echo "      documents to be fetched next"
    echo " next_fetch_for_date [search|count] <DATE> [<PAGE> [<SIZE>]]"
    echo "      documents to be fetched next for date"
    echo " next_fetch_for_date_and_host [search|count] <DATE> <HOST/DOMAIN> [<PAGE> [<SIZE>]]"
    echo "      documents to be fetched next at date for given host/domain"
    echo " failed_by_metadata [search|count] <META>"
    echo "      failed fetches (status not FETCHED) filtered by metadata"
    echo " status_by_metadata [search|count] <STATUS> <META>"
    echo "      match by status and metadata"
    echo
    echo " update_by_query <SCRIPT> <QUERY>"
    echo "      update documents by query"
    echo " reset_by_query [search|count|reset] <QUERY>"
    echo "      reset documents by query (or count/search to inspect impact before)"
    echo " reset_failed_by_metadata [search|count|reset] <META>"
    echo "      reset failed fetches filtered by metadata"
    echo " fetch_at [search|count|update] <DATE> <TYPE> <TERM> <META>"
    echo "      bulk setting of next fetch time (or count/search to inspect impact before)"
    echo
    echo " index_size"
    echo "      show current size (number of documents) of the status index"
    echo " index_size_gb"
    echo "      show current size (storage in GiB) of the status index"
    echo
    echo "Environment variables"
    echo " ES_STATUS_URL  URL to query status index, default: ${__ES_STATUS_URL_DEFAULT}"
    echo
    echo
    echo "Examples"
    echo
    echo "% $0 aggregate_status"
    echo "3340330 FETCHED"
    echo "514847  DISCOVERED"
    echo "365852  REDIRECTION"
    echo "59903   ERROR"
    echo "4545    FETCH_ERROR"
    echo
    echo "% $0 -v url http://example.com/"
    cat <<EOF
+ curl -s -H Content-Type:application/json -XGET 'http://localhost:9200/status/_search?pretty' --data '{
    "query": {
        "match": {
            "url": "http://example.com/"
        }
    }
}'
{
 "took" : 36,
 "timed_out" : false,
 "_shards" : { ... },
 "hits" : {
    "total" : 1,
    "max_score" : 13.739399,
    "hits" : [ {
      "_index" : "status",
      "_type" : "status",
      "_id" : "http://example.com/",
 ...
EOF
    echo
}


ES_STATUS_URL=${ES_STATUS_URL:-$__ES_STATUS_URL_DEFAULT}

# exit on errors
set -e


# current time in Elasticsearch date format
function ____now () {
    date -u '+%Y-%m-%dT%H:%M:%S.000Z'
}

# given date in Elasticsearch date format
function ____date () {
    date -d"$1" -u '+%Y-%m-%dT%H:%M:%S.000Z'
}

# escape reserved characters in id strings ('/?&+')
function ____escape_id () {
    URL="$1"
    URL="${URL//\//%2F}"
    URL="${URL//\?/%3F}"
    URL="${URL//&/%26}"
    URL="${URL//\+/%2B}"
    URL="${URL// /%20}"
    echo -n "$URL"
}

# return expression to match a metadata field in a boolean query
function ____must_match_metadata () {
    META="$1"
    echo '"must": [
'"$(____metadata_exists_istrue "$META")"'
                    ]'
}

function ____metadata_exists_istrue () {
    META="$1"
    echo '                 { "exists": { "field": "metadata.'"$META"'" }},
                 { "match": { "metadata.'"$META"'": "true" }}'
}

# query status index
function __query () {
    CMND="$1"
    QUERY="$2"
    PAGE="${3:-0}"
    SIZE="${4:-1000}"
    if [ "$CMND" == "search" ]; then
        PAGING=$'\n''    "from" : '$(($PAGE*$SIZE))', "size" : '$SIZE','
    fi
    $SHOW_COMMAND
    $CURL -XGET $ES_STATUS_URL'/_'$CMND'?pretty' --data \
'{'"$PAGING"'
    "query": {
        '"$QUERY"'
    }
}'
}

# query status index with routing
function __query_routed () {
    CMND="$1"
    ROUTE="$2"
    QUERY="$3"
    PAGE="${4:-0}"
    SIZE="${5:-1000}"
    if [ "$CMND" == "search" ]; then
        PAGING=$'\n''    "from" : '$(($PAGE*$SIZE))', "size" : '$SIZE','
    fi
    $SHOW_COMMAND
    $CURL -XGET $ES_STATUS_URL'/_'$CMND'?pretty&routing='$ROUTE --data \
'{'"$PAGING"'
    "query": {
        '"$QUERY"'
    }
}'
}

# match expression in status index
function __match () {
    CMND="$1"
    EXPR="$2"
    shift 2 || { echo "Not enough arguments"; exit 1; }
    __query $CMND '
        "match": {
            '"$EXPR"'
        }' "$@"
}

# look up by URL
function __url () {
    URL="$1"
    __match search '"url": "'"$URL"'"'
}

function __inject_url () {
    URL="$1"
    ROUTING="$2"
    shift 2 || { echo "Not enough arguments"; exit 1; }
    METADATA_ADD=""
    while [ $# -gt 0 ]; do
        META_NAME="$1"
        META_VALUE="$2"
        shift 2 || { echo "Metadata must be given as key-value pairs"; exit 1; }
        METADATA_ADD="$METADATA_ADD,"$'\n'"      \"$META_NAME\": \"$META_VALUE\""
    done
    ID="$(echo -n "$URL" | sha256sum | cut -d' ' -f1)"
    $SHOW_COMMAND
    $CURL -XPUT "$ES_STATUS_URL/_doc/$ID?op_type=create&routing=$ROUTING" --data '{
    "url" : "'"$URL"'",
    "status" : "DISCOVERED",
    "metadata" : {
      "hostname": "'"$ROUTING"'"'"$METADATA_ADD"'
    },
    "nextFetchDate": "'"$(____now)"'"
}'
}


# delete document/record by URL
function __delete_url () {
    URL="$1"
    $SHOW_COMMAND
    $CURL -XPOST $ES_STATUS_URL/_doc/_delete_by_query --data '{
    "query": {
        "match": {
            "url": "'"$URL"'"
        }
    }
}'
}

# look up by ID
function __id () {
    ID="$(____escape_id "$1")"
    ROUTING="$2"
    shift 2 || { echo "Not enough arguments"; exit 1; }
    $SHOW_COMMAND
    $CURL -XGET "$ES_STATUS_URL/_doc/$ID?pretty&routing=$ROUTING"
}

# delete document/record by ID
function __delete_id () {
    ID="$(____escape_id "$1")"
    ROUTING="$2"
    shift 2 || { echo "Not enough arguments"; exit 1; }
    $SHOW_COMMAND
    $CURL -XDELETE "$ES_STATUS_URL/_doc/$ID?pretty&routing=$ROUTING"
}

# delete document/record by URL with forced routing
function __delete_url_with_routing () {
    URL="$1"
    ROUTING="$2"
    shift 2 || { echo "Not enough arguments"; exit 1; }
    ID="$(echo -n "$URL" | sha256sum | cut -d' ' -f1)"
    ID="$(____escape_id "$ID")"
    $SHOW_COMMAND
    $CURL -XDELETE "$ES_STATUS_URL/_doc/$ID?pretty&routing=$ROUTING"
}

# list n documents
function __list () {
    SIZE=$1
    $SHOW_COMMAND
    $CURL -XGET "$ES_STATUS_URL/_doc/_search?pretty&size=$SIZE"
}

# match documents by field and value
function __match_field () {
    CMND="$1"
    TYPE="$2"
    TERM="$3"
    __match $CMND '"'"$TYPE"'": "'"$TERM"'"'
}

function ____next_fetch_at () {
    CMND="$1"
    DATE="$2"
    shift 2
    __query $CMND \
      '"range": {
           "nextFetchDate": {
               "lt": "'"$DATE"'"
           }
       }' "$@"
}

function ____next_fetch_at_for_host () {
    CMND="$1"
    DATE="$2"
    HOST="$3"
    shift 3
    __query_routed $CMND "$HOST" \
     '"bool" : {
        "must": {
           "term": {
               "metadata.hostname": "'"$HOST"'"
           }
        },
        "filter": {
           "range": {
               "nextFetchDate": {
                 "lt": "'"$DATE"'"
               }
           }
        }
       }' "$@"
}

# documents to be fetched next
function __next_fetch () {
    CMND="$1"
    shift 1 || { echo "Not enough arguments"; exit 1; }
    DATE="$(____now)"
    ____next_fetch_at "$CMND" "$DATE" "$@"
}

# documents to be fetched next at date
function __next_fetch_for_date () {
    CMND="$1"
    DATE="$(____date "$2")"
    shift 2 || { echo "Not enough arguments"; exit 1; }
    ____next_fetch_at "$CMND" "$DATE" "$@"
}

# documents to be fetched next at date
function __next_fetch_for_date_and_host () {
    CMND="$1"
    DATE="$(____date "$2")"
    HOST="$3"
    shift 3 || { echo "Not enough arguments"; exit 1; }
    ____next_fetch_at_for_host "$CMND" "$DATE" "$HOST" "$@"
}

# match documents by field value and metadata
function __match_by_metadata () {
    CMND="$1"
    TYPE="$2"
    TERM="$3"
    META="$4"
    shift 4 || { echo "Not enough arguments"; exit 1; }
    __query $CMND '
       "bool": {
          "must": [
             { "match": { "'"$TYPE"'": "'"$TERM"'" }},
             '"$(____metadata_exists_istrue "$META")"'
          ]
       }'
}

# aggregate values on field
function __aggregate () {
    FIELD="$1"
    SIZE="${2:-100000}"
    $SHOW_COMMAND
    $CURL -XGET $ES_STATUS_URL'/_search?pretty' --data \
'{
    "aggs" : {
        "agg" : {
            "terms" : {
                "field" : "'"$FIELD"'",
                "size" : '"$SIZE"'
            }
        }
    }
}' | jq --raw-output '.aggregations.agg.buckets[] | [(.doc_count|tostring),.key] | join("\t")'
}

# aggregate fetch status
function __aggregate_status () {
    __aggregate status "$@"
}

# aggregate field values filtered by query
function __aggregate_by () {
    FIELD="$1"
    QUERY="$2"
    SIZE="${3:-100000}"    
    $SHOW_COMMAND
    $CURL -XGET $ES_STATUS_URL'/_search?pretty' --data \
'{
    "aggs" : {
        "agg" : {
            "filter": {
                "bool": {
                    '"$QUERY"'
                }
            },
            "aggs" : {
                "agg" : {
                    "terms" : {
                        "field" : "'"$FIELD"'",
                        "size" : '"$SIZE"'
                    }
                }
            }
        }
    }
}' | jq --raw-output '.aggregations.agg.agg.buckets[] | [(.doc_count|tostring),.key] | join("\t")'
}

# aggregate field values filtered by metadata
function __aggregate_by_metadata () {
    FIELD="$1"
    META="$2"
    SIZE="${3:-100000}"
    $SHOW_COMMAND
    __aggregate_by "$FIELD" "$(____must_match_metadata "$META")" "$SIZE"
}

# aggregate host names (or domain names) filtered by metadata
function __aggregate_hostname () {
    FILTER="$1"
    shift 1 || { echo "Not enough arguments"; exit 1; }
    __aggregate_by metadata.hostname "$FILTER" "$@"
}

# aggregate host names (or domain names) filtered by status
function __aggregate_hostname_by_status () {
    STATUS="$1"
    shift 1 || { echo "Not enough arguments"; exit 1; }
    __aggregate_hostname '"must": {
                        "match": {
                            "status": "'"$STATUS"'"
                        }
                    }' "$@"
}

# failed fetches (status not FETCHED) filtered by metadata
function __failed_by_metadata () {
    CMND="$1"
    META="$2"
    shift 2 || { echo "Not enough arguments"; exit 1; }
    __query $CMND '"bool": {
            '"$(____must_match_metadata "$META")"',
            "must_not": {
                "match": {
                    "status": "FETCHED"
                }
            }
        }' "$@"
}

# match by status and metadata
function __status_by_metadata () {
    CMND="$1"
    STATUS="$2"
    META="$3"
    shift 3 || { echo "Not enough arguments"; exit 1; }
    __match_by_metadata $CMND "status" "$STATUS" "$META"
}

# update documents by query
function __update_by_query () {
    SCRIPT="$1"
    QUERY="$2"
    $SHOW_COMMAND
    $CURL -XPOST $ES_STATUS_URL'/_update_by_query?pretty' --data \
         '{
    '"$SCRIPT"'
    "query": {
        '"$QUERY"'
    }
}'
}

# reset documents by query
function __reset_by_query () {
    CMND="$1"
    QUERY="$2"
    if [ "$CMND" == "reset" ]; then
        CMND=__update_by_query
        NEXTFETCHDATE="$(____now)"
        SCRIPT='"script" : {
          "inline": "ctx._source.status = \"DISCOVERED\";
                     ctx._source.metadata['\''signatureChangeDate'\''] = [];
                     ctx._source.nextFetchDate = \"'"$NEXTFETCHDATE"'\";
                     ctx._source.metadata['\''error%2Esource'\''] = [];
                     ctx._source.metadata['\''last-modified'\''] = [];"
        },'
        SCRIPT="${SCRIPT//$'\n'/ }"
        $CMND "$SCRIPT" "$QUERY"
    else
        __query $CMND "$QUERY"
    fi
}

# reset by URL
function __reset_url () {
    URL="$2"
    __reset_by_query "reset" '"match": {
            "url": "'"$URL"'"
        }'
}

# set time of next fetch to now for URL
function __fetch_now_url () {
    URL="$1"
    NEXTFETCHDATE="$(____now)"
    __fetch_at_url "$URL" "$NEXTFETCHDATE"
}

# set time of next fetch to now for URL
function __fetch_at_url () {
    URL="$1"
    NEXTFETCHDATE="$(____date "$2")"
    SCRIPT='"script" : {
          "lang":   "painless",
          "source": "ctx._source.nextFetchDate = params.nextfetchdate",
          "params": {
               "nextfetchdate": "'"$NEXTFETCHDATE"'"
          }
        },'
    __update_by_query "$SCRIPT" '"match": {
            "url": "'"$URL"'"
        }'
}

# reset failed fetches by metadata
function __reset_failed_by_metadata () {
    CMND="$1"
    META="$2"
    __reset_by_query "$CMND" '"filtered": {
            "filter": {
                "bool": {
                    '"$(____must_match_metadata "$META")"',
                    "must_not": {
                        "match": {
                            "status": "FETCHED"
                        }
                    }
                }
            }
        }'
}

# bulk setting of next fetch time
function __fetch_at () {
    CMND="$1"
    DATE="$2"
    TYPE="$3"
    TERM="$4"
    META="$5"
    shift 5 || { echo "Not enough arguments"; exit 1; }
    QUERY='"filtered": {
            "filter": {
               "bool": {
                    '"$(____must_match_metadata "$META")"'
                }
            },
            "query": {
                "match": {
                    "'"$TYPE"'": "'"$TERM"'"
                }
            }
        }'
    if [ "$CMND" == "update" ]; then
        CMND=update_by_query
        NEXTFETCHDATE="$(____date "$DATE")"
        SCRIPT="${SCRIPT//$'\n'/ }"
        SCRIPT='"script" : {
          "lang":   "painless",
          "source": "ctx._source.nextFetchDate = params.nextfetchdate",
          "params": {
               "nextfetchdate": "'"$NEXTFETCHDATE"'"
          }
        },'
        __update_by_query "$SCRIPT" "$QUERY"
    else
        __query $CMND "$QUERY"
    fi
}


# set metadata for URL
function __set_metadata_url () {
    URL="$1"
    META_NAME="$2"
    META_VALUE="$3"
    shift 3 || { echo "Not enough arguments"; exit 1; }
    SCRIPT='"script" : {
          "lang":   "painless",
          "source": "ctx._source.metadata.'"$META_NAME"' = params.metavalue",
          "params": {
               "metavalue": "'"$META_VALUE"'"
          }
        },'
    __update_by_query "$SCRIPT" '"match": {
            "url": "'"$URL"'"
        }'
}


# get index statistics
function __index_stats() {
    FILTER="${1:-.}"
    $SHOW_COMMAND
    $CURL -XGET $ES_STATUS_URL'/_stats' \
          | jq "$FILTER"
}

# show index size (number of documents)
function __index_size() {
    __index_stats ._all.primaries.docs.count
}

# show index size (storage in GiB)
function __index_size_gb() {
    __index_stats "._all.primaries.store.size_in_bytes | (. / (1024*1024*1024))"
}


COLORIZE=false
VERBOSE=false
DRYRUN=false

while getopts "vVDCh?" opt; do
    case $opt in
        v ) # verbose
            VERBOSE=true ;;
        V ) # very verbose
            set -x ;;
        D ) # dry-run
            DRYRUN=true
            CURL=true ;;
        C ) COLORIZE=true ;;
        h | \? )
            ____show_help
            exit ;;
    esac
done
shift $(($OPTIND - 1))

CURL="curl -s -H Content-Type:application/json"
if $DRYRUN; then
    export CURL=": curl"
fi

if $VERBOSE; then
    SHOW_COMMAND="set -x"
fi

if [ $# -eq 0 ]; then
    ____show_help
    exit
fi

COMMAND="$1"; shift

if $COLORIZE && ! [[ "$COMMAND" =~ ^aggregate ]]; then
    __$COMMAND "$@" | jq --color-output --raw-output '.'
else
    __$COMMAND "$@"
fi
